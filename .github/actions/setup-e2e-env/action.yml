name: 'Setup E2E Test Environment'
description: 'Sets up the environment for running E2E tests'

inputs:
  platform:
    description: 'Platform (ios or android)'
    required: true
  node-version:
    description: 'Node.js version'
    required: false
    default: '20.18.0'
  yarn-version:
    description: Yarn version to use with Corepack
    required: false
    default: '3.8.7'
  setup-simulator:
    description: 'Whether to setup simulator/emulator'
    required: false
    default: 'false'
  bundler-version:
    description: 'Bundler version to use (only for iOS)'
    required: false
    default: '2.5.8'
  cache-prefix:
    description: 'Cache key prefix'
    required: false
    default: 'e2e'
  ruby-version:
    description: Ruby version to use (only for iOS)
    required: false
    default: '3.1'
  xcode-version:
    description: Xcode version to select (e.g., 16.3)
    required: false
    default: '16.3'
  jdk-version:
    description: JDK version to use (only for Android)
    required: false
    default: '17'
  jdk-distribution:
    description: JDK distribution to use (only for Android)
    required: false
    default: 'temurin'
  foundry-version:
    description: Foundry version to install
    required: false
    default: 'v1.2.3'
  android-avd-name:
    description: 'Name of AVD to create and boot (for Android)'
    required: false
    default: 'test_e2e_avd'
  android-device:
    description: 'AVD device profile (e.g. "pixel_5", "pixel", "Nexus 6")'
    required: false
    default: 'pixel_5'
  android-api-level:
    description: 'Android API level to use (e.g. "34")'
    required: false
    default: '34'
  android-abi:
    description: 'System architecture ABI for the Android system image (e.g. x86_64, arm64-v8a, armeabi-v7a)'
    required: false
    default: 'x86_64'
  android-tag:
    description: 'Android system image tag (e.g. google_apis, default)'
    required: false
    default: 'google_apis'
  android-sdcard-size:
    description: 'SD card size for AVD (e.g. 8092M)'
    required: false
    default: '8092M'
  configure-keystores:
    description: 'Whether to configure keystores for E2E tests'
    required: false
    default: 'true'
  keystore-role-to-assume:
    description: 'AWS IAM role to assume for keystore configuration'
    required: false
    default: 'arn:aws:iam::363762752069:role/metamask-mobile-build-signer-qa'
  target:
    description: 'Target for which the keystore is being configured (e.g., qa, flask, main)'
    required: false
    default: 'qa'

runs:
  using: 'composite'
  steps:
    ## Common Setup ##
    - run: echo "Setup E2E Environment started"
      shell: bash

    # Set user path for Bitrise vagrant user
    - name: Set user paths for Bitrise runner
      run: |
        echo "USER_HOME=/Users/vagrant" >> "$GITHUB_ENV"
        echo "HOME=/Users/vagrant" >> "$GITHUB_ENV"
        echo "RUNNER_TOOL_CACHE=/Users/vagrant/hostedtoolcache" >> "$GITHUB_ENV"
        echo "RUNNER_TEMP=/Users/vagrant/tmp" >> "$GITHUB_ENV"
        # Create the directories if they don't exist
        mkdir -p /Users/vagrant/hostedtoolcache
        mkdir -p /Users/vagrant/tmp
        echo "Using hardcoded vagrant user path: /Users/vagrant"
      shell: bash

    ## Android Setup (early for fail-fast) ##

    # Set Android environment variables (self-hosted runner has SDK pre-installed)
    - name: Set Android environment variables
      if: ${{ inputs.platform == 'android' }}
      run: |
        echo "ANDROID_HOME=/opt/android-sdk" >> "$GITHUB_ENV"
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> "$GITHUB_ENV"
      shell: bash

    - name: Configure Android Signing Certificates
      if: ${{ inputs.platform == 'android' && inputs.configure-keystores == 'true' }}
      uses: MetaMask/github-tools/.github/actions/configure-keystore@0259e8a920318b02a8860e178d79796eaa08de02
      with:
        aws-role-to-assume: ${{ inputs.keystore-role-to-assume }}
        aws-region: 'us-east-2'
        platform: 'android'
        target: ${{ inputs.target }}

    ## JDK Setup
    - name: Setup Java
      if: ${{ inputs.platform == 'android' }}
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00
      with:
        java-version: ${{ inputs.jdk-version }}
        distribution: ${{ inputs.jdk-distribution }}

    - name: Install required emulator dependencies
      if: ${{ inputs.platform == 'android' && runner.os == 'Linux' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpulse0 \
          libglu1-mesa \
          libnss3 \
          libxss1

        echo "✅ Linux dependencies installed successfully"
      shell: bash

    ## Android SDK Setup (SDK pre-installed in container)

    - name: Install additional Android SDK components if needed
      if: ${{ inputs.platform == 'android' && (inputs.android-api-level != '34' || inputs.android-abi != 'x86_64') }}
      run: |
        # Only install if different from pre-installed defaults (API 34, x86_64)
        IMAGE="system-images;android-${{ inputs.android-api-level }};google_apis;${{ inputs.android-abi }}"
        echo "Installing additional system image: $IMAGE"
        echo "y" | "/opt/android-sdk/cmdline-tools/latest/bin/sdkmanager" "$IMAGE"
      shell: bash

    ## Launch AVD

    - name: Set ANDROID_AVD_HOME for downstream steps
      if: ${{ inputs.platform == 'android'}}
      shell: bash
      run: |
        echo "ANDROID_AVD_HOME=$USER_HOME/.android/avd" >> "$GITHUB_ENV"
        mkdir -p "$USER_HOME/.android/avd"

    - name: Create Android Virtual Device (AVD)
      if: ${{ inputs.platform == 'android'}}
      run: |
        IMAGE="system-images;android-${{ inputs.android-api-level }};${{ inputs.android-tag }};${{ inputs.android-abi }}"
        echo "Creating AVD with image: $IMAGE"
        "/opt/android-sdk/cmdline-tools/latest/bin/avdmanager" --verbose create avd \
          --force \
          --name "${{ inputs.android-avd-name }}" \
          --package "$IMAGE" \
          --device "${{ inputs.android-device }}" \
          --tag "${{ inputs.android-tag }}" \
          --abi "${{ inputs.android-abi }}" \
          --sdcard "${{ inputs.android-sdcard-size }}"
      shell: bash

    ## iOS Platform Setup ##

    - name: Configure iOS Signing Certificates
      if: ${{ inputs.platform == 'ios' && inputs.configure-keystores == 'true' }}
      uses: MetaMask/github-tools/.github/actions/configure-keystore@0259e8a920318b02a8860e178d79796eaa08de02
      with:
        aws-role-to-assume: ${{ inputs.keystore-role-to-assume }}
        aws-region: 'us-east-2'
        platform: 'ios'
        target: ${{ inputs.target }}

    ## Node.js & JavaScript Dependencies Setup ##

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    ## Yarn Setup & Cache Management

    # - name: Corepack
    #   id: corepack
    #   run: corepack enable && corepack prepare yarn@${{ inputs.yarn-version }} --activate
    #   shell: bash

    - name: Corepack
      id: corepack
      uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 #v3.0.2
      with:
        timeout_minutes: 15
        max_attempts: 3
        retry_wait_seconds: 30
        command: corepack enable && corepack prepare yarn@${{ inputs.yarn-version }} --activate

    - name: Restore Yarn cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
        key: ${{ inputs.cache-prefix }}-yarn-${{ inputs.platform }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ inputs.cache-prefix }}-yarn-${{ inputs.platform }}-${{ runner.os }}-

    - name: Install JavaScript dependencies with retry
      id: yarn-install
      uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 #v3.0.2
      with:
        timeout_minutes: 15
        max_attempts: 3
        retry_wait_seconds: 30
        command: yarn install --immutable
      env:
        NODE_OPTIONS: --max-old-space-size=4096 # Increase memory limit for Node.js due to large dependencies

    - name: Install Foundry
      shell: bash
      run: |
        echo "Installing Foundry via foundryup..."

        export FOUNDRY_DIR="${XDG_CONFIG_HOME:-$USER_HOME/.config}/.foundry"
        export FOUNDRY_BIN="$FOUNDRY_DIR/bin"

        mkdir -p "$FOUNDRY_BIN"

        curl -sL https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup -o "$FOUNDRY_BIN/foundryup"
        chmod +x "$FOUNDRY_BIN/foundryup"

        echo "$FOUNDRY_BIN" >> "$GITHUB_PATH"

        "$FOUNDRY_BIN/foundryup"

    ## IOS Setup ##

    ## Ruby Setup & Cache Management
    - name: Setup Ruby (use system Ruby for vagrant user)
      if: ${{ inputs.platform == 'ios' }}
      run: |
        # Use system Ruby instead of ruby/setup-ruby action to avoid permission issues
        echo "Using system Ruby for vagrant user"
        
        # Check if rbenv is being used and install required Ruby version
        if command -v rbenv &> /dev/null; then
          echo "rbenv detected, installing Ruby ${{ inputs.ruby-version }}"
          # Install the required Ruby version if not already installed
          rbenv install -s ${{ inputs.ruby-version }}
          rbenv global ${{ inputs.ruby-version }}
          # Reload rbenv
          eval "$(rbenv init -)"
        fi
        
        ruby --version
        gem --version
        # Install bundler globally
        gem install bundler -v ${{ inputs.bundler-version }}
      shell: bash

    # Install Bundler first (now handled in Ruby setup step above)

    # Restore cached Ruby gems
    - name: Restore Bundler cache
      if: ${{ inputs.platform == 'ios' }}
      uses: actions/cache@v4
      with:
        path: ios/vendor/bundle
        key: ${{ inputs.cache-prefix }}-bundler-${{ inputs.platform }}-${{ runner.os }}-${{ hashFiles('ios/Gemfile.lock') }}
        restore-keys: |
          ${{ inputs.cache-prefix }}-bundler-${{ inputs.platform }}-${{ runner.os }}-

    # Configure bundler to use a specific path for gem installation
    - name: Configure bundler install path
      if: ${{ inputs.platform == 'ios' }}
      run: bundle config set path 'vendor/bundle'
      working-directory: ios
      shell: bash

    # Install Ruby gems into ios/vendor/bundle ( cache management & awareness )
    - name: Install Ruby gems via bundler
      if: ${{ inputs.platform == 'ios' }}
      run: bundle install
      working-directory: ios
      shell: bash

    - name: Generate binstubs for CocoaPods
      if: ${{ inputs.platform == 'ios' }}
      run: bundle binstubs cocoapods --force --path=vendor/bundle/bin
      working-directory: ios
      shell: bash

    - name: Add binstubs to PATH
      if: ${{ inputs.platform == 'ios' }}
      run: echo "$(pwd)/ios/vendor/bundle/bin" >> "$GITHUB_PATH"
      shell: bash

    # Verify CocoaPods is available
    - name: Verify CocoaPods
      if: ${{ inputs.platform == 'ios' }}
      run: |
        bundle show cocoapods || (echo "❌ CocoaPods not installed from ios/Gemfile" && exit 1)
        bundle exec pod --version
      working-directory: ios
      shell: bash

    # Verify CocoaPods is available
    - name: Verify CocoaPods BinStub
      if: ${{ inputs.platform == 'ios' }}
      run: |
        bundle show cocoapods || (echo "❌ CocoaPods not installed from ios/Gemfile" && exit 1)
        pod --version
      working-directory: ios
      shell: bash

    # Select Xcode version
    - name: Select Xcode version
      if: ${{ inputs.platform == 'ios' }}
      run: sudo xcode-select -s /Applications/Xcode_${{ inputs.xcode-version }}.app
      shell: bash

    # Restore CocoaPods cache
    # - name: Restore CocoaPods cache
    #   if: ${{ inputs.platform == 'ios'}}
    #   uses: actions/cache@v4
    #   with:
    #     path: ios/Pods
    #     key: ${{ inputs.cache-prefix }}-pods-${{ inputs.platform }}-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
    #     restore-keys: |
    #       ${{ inputs.cache-prefix }}-pods-${{ inputs.platform }}-${{ runner.os }}-

    # Install CocoaPods w/ cached bundler environment
    - name: Install CocoaPods via bundler
      if: ${{ inputs.platform == 'ios'}}
      run: bundle exec pod install --repo-update
      working-directory: ios
      shell: bash

    - name: Install applesimutils
      if: ${{ inputs.platform == 'ios' }}
      run: |
        if ! brew list applesimutils &>/dev/null; then
          brew tap wix/brew
          brew install applesimutils
        else
          echo "applesimutils is already installed, skipping..."
        fi
      shell: bash

    - name: Check simutils
      if: ${{ inputs.platform == 'ios' }}
      run: xcrun simctl list devices
      shell: bash
