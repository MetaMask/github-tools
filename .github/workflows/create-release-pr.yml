name: Create Release Pull Request

on:
  workflow_call:
    inputs:
      base-branch:
        required: true
        type: string
        description: 'The base branch, tag, or SHA for git operations and the pull request.'
      semver-version:
        required: true
        type: string
        description: 'A semantic version. eg: x.x.x'
      mobile-build-version:
        required: false
        type: string
        description: 'The build version for the mobile platform.'
      previous-version-tag:
        required: true
        type: string
        description: 'Previous release version tag. eg: v7.7.0'
      # Flag to indicate if the release is a test release for development purposes only
      mobile-template-sheet-id:
        required: false
        type: string
        description: 'The Mobile testing sheet template id.'
        default: '1012668681' # prod sheet template
      extension-template-sheet-id:
        required: false
        type: string
        description: 'The Extension testing sheet template id.'
        default: '295804563' # prod sheet template
      test-only:
        required: false
        type: string
        description: 'If true, the release will be marked as a test release.'
        default: 'false'
      # possible values are [ mobile, extension ]
      release-sheet-google-document-id:
        required: false
        type: string
        description: 'The Google Document ID for the release notes.'
        default: '1tsoodlAlyvEUpkkcNcbZ4PM9HuC9cEM80RZeoVv5OCQ' # Prod Release Document
      platform:
        required: true
        type: string
        description: 'The platform for which the release PR is being created.'
      github-tools-version:
        type: string
        description: 'The version of github-tools to use. Defaults to main.'
        default: 'main'
    secrets:
      github-token:
        required: true
        description: 'GitHub token used for authentication.'
      google-application-creds-base64:
        required: true
        description: 'Google application credentials base64 encoded.'

jobs:
  create-release-pr:
    name: Create Release Pull Request
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Step 1: Checkout invoking repository (metamask-mobile | metamask-extension )
      - name: Checkout invoking repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.base-branch }}
          token: ${{ secrets.github-token }}

      # Step 2: Checkout github-tools repository
      - name: Checkout github-tools repository
        uses: actions/checkout@v4
        with:
          repository: MetaMask/github-tools
          ref: ${{ inputs.github-tools-version }}
          path: github-tools

      # Step 3: Setup environment from github-tools
      - name: Checkout and setup environment
        uses: ./github-tools/.github/actions/checkout-and-setup
        with:
          is-high-risk-environment: true

      # Step 4: Print Input Values
      - name: Print Input Values
        run: |
          echo "Input Values:"
          echo "-------------"
          echo "Platform: ${{ inputs.platform }}"
          echo "Base Branch: ${{ inputs.base-branch }}"
          echo "Semver Version: ${{ inputs.semver-version }}"
          echo "Previous Version Tag: ${{ inputs.previous-version-tag }}"
          echo "Test Only Mode: ${{ inputs.test-only }}"
          if [[ "${{ inputs.platform }}" == "mobile" ]]; then
            echo "Mobile Build Version: ${{ inputs.mobile-build-version }}"
          fi
          echo "Mobile Template Sheet ID: ${{ inputs.mobile-template-sheet-id }}"
          echo "Extension Template Sheet ID: ${{ inputs.extension-template-sheet-id }}"
          echo "Release Sheet Google Document ID: ${{ inputs.release-sheet-google-document-id }}"
          echo "GitHub Tools Version: ${{ inputs.github-tools-version }}"
          echo "-------------"

      # Step 5: Create Release PR
      - name: Create Release PR
        id: create-release-pr
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          BASE_BRANCH: ${{ inputs.base-branch }}
          GITHUB_REPOSITORY_URL: '${{ github.server_url }}/${{ github.repository }}'
          TEST_ONLY: ${{ inputs.test-only }}
          GOOGLE_DOCUMENT_ID: ${{ inputs.release-sheet-google-document-id }}
          GOOGLE_APPLICATION_CREDENTIALS_BASE64: ${{ secrets.google-application-creds-base64 }}
          NEW_VERSION: ${{ inputs.semver-version }}
          MOBILE_TEMPLATE_SHEET_ID: ${{ inputs.mobile-template-sheet-id }}
          EXTENSION_TEMPLATE_SHEET_ID: ${{ inputs.extension-template-sheet-id }}
        working-directory: ${{ github.workspace }}
        run: |
          # Execute the script from github-tools
          ./github-tools/.github/scripts/create-platform-release-pr.sh \
            ${{ inputs.platform }} \
            ${{ inputs.previous-version-tag }} \
            ${{ inputs.semver-version }} \
            ${{ inputs.mobile-build-version }}

  bump-main-version:
    name: Create Version Bump PR for Main
    runs-on: ubuntu-latest
    needs: create-release-pr
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Step 1: Checkout main branch of invoking repository
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.github-token }}

      # Step 2: Checkout github-tools repository
      - name: Checkout github-tools repository
        uses: actions/checkout@v4
        with:
          repository: MetaMask/github-tools
          ref: ${{ inputs.github-tools-version }}
          path: github-tools

      # Step 3: Setup environment from github-tools
      - name: Checkout and setup environment
        uses: ./github-tools/.github/actions/checkout-and-setup
        with:
          is-high-risk-environment: true

      # Step 4: Calculate next version
      - name: Calculate next version
        id: calc-version
        working-directory: github-tools
        run: |
          # Use Node.js semver to increment the minor version
          CURRENT_VERSION="${{ inputs.semver-version }}"
          NEXT_VERSION=$(node -e "
            const semver = require('semver');
            const current = '$CURRENT_VERSION';
            const next = semver.inc(current, 'minor');
            console.log(next);
          ")
          echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION"

      # Step 5: Create version bump branch
      - name: Create version bump branch
        run: |
          BRANCH_NAME="bump-main-version-${{ steps.calc-version.outputs.next-version }}"

          # Check if branch already exists locally or remotely
          if git show-ref --verify --quiet refs/heads/"$BRANCH_NAME" || git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists, checking it out"
            if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              git fetch origin "$BRANCH_NAME"
              git checkout "$BRANCH_NAME"
            else
              git checkout "$BRANCH_NAME"
            fi
          else
            echo "Creating new branch $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
          fi

          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: create-branch

      # Step 6: Update version using set-semvar-version.sh
      - name: Update version files
        run: |
          # Make script executable
          chmod +x ./github-tools/.github/scripts/set-semvar-version.sh

          # Run the version update script
          ./github-tools/.github/scripts/set-semvar-version.sh \
            ${{ steps.calc-version.outputs.next-version }} \
            ${{ inputs.platform }}

      # Step 7: Commit changes
      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Bump version to ${{ steps.calc-version.outputs.next-version }} after release ${{ inputs.semver-version }}

          This automated version bump ensures that:
          - Main branch version is ahead of the release branch
          - Future nightly builds will have correct versioning

          Release version: ${{ inputs.semver-version }}
          New main version: ${{ steps.calc-version.outputs.next-version }}
          Platform: ${{ inputs.platform }}"

      # Step 8: Push branch
      - name: Push version bump branch
        run: |
          if ! git push --set-upstream origin ${{ steps.create-branch.outputs.branch-name }}; then
            echo "No changes to push to ${{ steps.create-branch.outputs.branch-name }}"
            # Check if branch exists remotely
            if git ls-remote --heads origin ${{ steps.create-branch.outputs.branch-name }} | grep -q ${{ steps.create-branch.outputs.branch-name }}; then
              echo "Branch ${{ steps.create-branch.outputs.branch-name }} already exists remotely"
            else
              echo "Error: Failed to push and branch doesn't exist remotely"
              exit 1
            fi
          fi

      # Step 9: Create pull request
      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          # Check if PR already exists
          if gh pr list --head ${{ steps.create-branch.outputs.branch-name }} --json number --jq 'length' | grep -q "1"; then
            echo "PR for branch ${{ steps.create-branch.outputs.branch-name }} already exists"
          else
            gh pr create \
              --title "ðŸ”„ Bump main version to ${{ steps.calc-version.outputs.next-version }}" \
              --body "## Version Bump After Release

            This PR bumps the main branch version from ${{ inputs.semver-version }} to ${{ steps.calc-version.outputs.next-version }} after cutting the release branch.

            ### Why this is needed:
            - **Nightly builds**: Each nightly build needs to be one minor version ahead of the current release candidate
            - **Version conflicts**: Prevents conflicts between nightlies and release candidates
            - **Platform alignment**: Maintains version alignment between MetaMask mobile and extension
            - **Update systems**: Ensures nightlies are accepted by app stores and browser update systems

            ### What changed:
            - Version bumped from \`${{ inputs.semver-version }}\` to \`${{ steps.calc-version.outputs.next-version }}\`
            - Platform: \`${{ inputs.platform }}\`
            - Files updated by \`set-semvar-version.sh\` script

            ### Next steps:
            This PR should be **manually reviewed and merged by the release manager** to maintain proper version flow.

            ### Related:
            - Release version: ${{ inputs.semver-version }}
            - Base branch for release: ${{ inputs.base-branch }}
            - Platform: ${{ inputs.platform }}

            ---
            *This PR was automatically created by the \`create-release-pr\` workflow.*" \
              --base main \
              --head ${{ steps.create-branch.outputs.branch-name }} \
              --label "release-management" \
              --label "version-bump" \
              --assignee @me
            echo "Version bump PR created successfully"
          fi
