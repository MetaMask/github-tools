name: Stable Sync

on:
  workflow_dispatch:
    inputs:
        semver-version:
            required: true
            type: string
            description: 'The semantic version to use for the sync (e.g., x.x.x)'
  workflow_call:
    inputs:
      semver-version:
        required: true
        type: string
        description: 'The semantic version to use for the sync (e.g., x.x.x)'

jobs:
  stable-sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check if PR exists
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:stable-main-${process.env.SEMVER_VERSION}`,
              base: 'main'
            });
            return prs.length > 0;
        env:
          SEMVER_VERSION: ${{ inputs.semver-version }}

      - name: Set Git user and email
        run: |
          git config --global user.name "metamaskbot"
          git config --global user.email "metamaskbot@users.noreply.github.com"
          
      - name: Run stable sync
        id: run-stable-sync
        # if: steps.check-pr.outputs.result != 'true'
        env:
          CREATE_BRANCH: 'false'
        run: |
          node .github/scripts/stable-sync.js "stable-main-${{ inputs.semver-version }}"
          # Check if branch exists remotely
          BRANCH_NAME="stable-main-${{ inputs.semver-version }}"
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME exists remotely, pushing normally"
            git push origin "$BRANCH_NAME" --rebase
          else
            echo "Branch $BRANCH_NAME doesn't exist remotely, pushing with --set-upstream"
            git push --set-upstream origin "$BRANCH_NAME"
          fi

      - name: Create Pull Request
        if: steps.check-pr.outputs.result != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: stable-main-${{ inputs.semver-version }}
          VERSION: ${{ inputs.semver-version }}
        run: |
          # Create PR using GitHub CLI
          gh pr create \
            --title "chore: sync stable to main for version $VERSION" \
            --body "This PR syncs the stable branch to main for version $VERSION.


          Resets it to match the remote 'stable' branch exactly.
          Lates 'main' branch is merged into this branch.
          Handles potential merge conflicts.
          Then performs a series of careful operations:
           - Restores all files from 'main' first (git checkout origin/main -- .)
          - Selectively restores specific files from 'stable' that should be preserved:
            - CHANGELOG.md
            - Mobile-specific files (bitrise.yml, android build files, iOS project files)
            - package.json
            - Indicates the next version candidate of main to $VERSION" \
            --base main \
            --head "$BRANCH_NAME"
            #--label "sync" \
            #--label "stable" 